// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //zx logic
    And16(a=x[0..15] , b= false , out=x0);
    Mux16(a=x[0..15] , b= x0, sel=zx , out= outZx);
    //nx logic
    Not16(in= outZx, out= notX);
    Mux16(a=outZx , b= notX, sel=nx , out= outNx);
    //zy
    And16(a=false , b= y[0..15], out= y0);
    Mux16(a=y[0..15] , b= y0, sel=zy , out= outZy);
    //ny
    Not16(in=outZy , out= notY);
    Mux16(a=outZy , b=notY , sel=ny , out= outNy);
    //f
    And16(a=outNx , b= outNy , out= xAndy);
    Add16(a = outNx, b = outNy , out = xAddy );
    Mux16(a=xAndy , b= xAddy, sel= f, out= outF);
    //no
    Not16(in= outF , out= notOut);
    Mux16(a=outF , b= notOut, sel=no , out=out, out[15] = ng, out[0..7] = outRight, out[8..15] = outLeft);
    //zr // if (out == 0) equals 1, else 0
    Or8Way(in= outRight, out= o1);
    Or8Way(in= outLeft , out= o2);
    Or(a=o1 , b= o2, out= zrAux);
    Mux(a=true , b=false , sel=zrAux , out=zr);
    
}